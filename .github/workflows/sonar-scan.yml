name: SonarCloud
on:
  push:
    branches:
      - main
    paths:
      - 'source/**'
  pull_request:
    types: [opened, synchronize, reopened]
permissions:
  checks: write
  pull-requests: write
jobs:
  build:
    name: Build and analyze
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: test
          POSTGRES_HOST_AUTH_METHOD: password
          POSTGRES_DB: test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
      - name: Set up JDK 17
        uses: actions/setup-java@v4.0.0
        with:
          java-version: 17
          distribution: 'zulu' # Alternative distribution options are available.
      - name: Install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage
      - name: Install Report Generator
        run: dotnet tool install --global dotnet-reportgenerator-globaltool
      - uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: Cache SonarCloud packages
        uses: actions/cache@v4.0.0
        with:
          path: ~/.sonar/cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v4.0.0
        with:
          path: ~/.sonar/scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          mkdir -p ./.sonar/scanner
          dotnet tool update dotnet-sonarscanner --tool-path ./.sonar/scanner
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner begin /k:"PatrickBig_the-grid" /o:"patrickbig" /d:sonar.token="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.cs.vscoveragexml.reportsPaths=test/coverage.xml /d:sonar.cs.vstest.reportsPaths=test/testresults/*.trx
          dotnet restore ./source/TheGrid.sln
          dotnet build ./source/TheGrid.sln
      - name: Run tests
        run: |
          dotnet-coverage collect "dotnet test ./source/TheGrid.sln --logger trx --results-directory ./test/testresults"  -f cobertura -o ./test/coverage.xml
      - name: Publish test results
        uses: EnricoMi/publish-unit-test-result-action@v2
        with:
          files: |
            ./test/testresults/**/*.trx
      - name: Publish SonarScan to SonarCloud
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          ./.sonar/scanner/dotnet-sonarscanner end /d:sonar.token="${{ secrets.SONAR_TOKEN }}"
      # - name: Code Coverage Report
      #   uses: irongut/CodeCoverageSummary@v1.3.0
      #   with:
      #     filename: ./**/coverage.xml
      #     badge: true
      #     format: markdown
      - name: Create code coverage report
        run: |
          dotnet tool update -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:/**/coverage.xml -targetdir:CodeCoverage -reporttypes:'MarkdownSummaryGithub,Cobertura'
      - name: Write to Job Summary
        run: cat CodeCoverage/SummaryGithub.md >> $GITHUB_STEP_SUMMARY