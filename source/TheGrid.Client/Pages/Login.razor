@page "/login"
@using System.ComponentModel.DataAnnotations

<RadzenCard class="rz-my-12 rz-mx-auto rz-p-4 rz-p-md-12" style="max-width: 600px;">
    <RadzenTemplateForm Data=@("LoginForm")>
        <RadzenLogin 
                     AllowRegister="true" AllowResetPassword="true"
                     AllowRememberMe="true" RememberMe="@rememberMe"
                     Login=@OnLoginAsync
                     ResetPassword=@OnResetPasswordAsync
                     Register=OnRegisterAsync>

        </RadzenLogin>
    </RadzenTemplateForm>
</RadzenCard>

@code {
    bool rememberMe;

    [SupplyParameterFromQuery(Name = "previousUrl")]
    public string? PreviousUrl { get; set; }

    [Inject]
    private HttpClient HttpClient { get; set; } = default!;

    [Inject]
    private ILogger<Login> Logger { get; set; } = default!;

    private async Task OnLoginAsync(LoginArgs loginArgs)
    {
        var request = new LoginRequest
        {
            Email = loginArgs.Username,
            Password = loginArgs.Password,
        };
        
        var response = await HttpClient.PostAsJsonAsync("login", request);

        var loginResponse = await response.Content.ReadFromJsonAsync<LoginResponse>();

        Logger.LogInformation("Login response: {@loginResponse}", loginResponse);
    }

    private async Task OnResetPasswordAsync()
    {

    }

    private async Task OnRegisterAsync()
    {

    }

    private class LoginRequest
    {
        [Required]
        [StringLength(256, MinimumLength = 1)]
        public string Email { get; set; } = default!;

        [Required]
        [StringLength(256, MinimumLength = 1)]
        public string Password { get; set; } = default!;

        public string? TwoFactorCode { get; set; }

        public string? TwoFactorRecoveryCode { get; set; }
    }

    private class LoginResponse
    {
        public string? TokenType { get; set; }
        public string AccessToken { get; set; } = default!;
        public int ExpiresIn { get; set; }
        public string RefreshToken { get; set; } = default!;
    }
}
