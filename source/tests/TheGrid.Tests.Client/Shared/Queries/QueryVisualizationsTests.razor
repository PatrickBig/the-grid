@inherits TestContext

@code {
    private const int _validQueryId = 1;
    private readonly ITestOutputHelper _testOutputHelper;

    public QueryVisualizationsTests(ITestOutputHelper testOutputHelper)
    {
        Services.AddRadzenComponents();

        var mockedQueryDesignerHubClient = Substitute.For<IQueryDesignerHubClient>();
        Services.AddSingleton(mockedQueryDesignerHubClient);

        var mock = Services.AddMockHttpClient();

        var visualization = new VisualizationResponse
            {
                Id = 1,
                Name = "Visualization 1",
                QueryId = _validQueryId,
                TableVisualizationOptions = new TableVisualizationOptions
                {
                    ColumnOptions = [],
                    PageSize = 10,
                },
                VisualizationType = VisualizationType.Table,
            };

        var columns = QueryColumnFixture.GetColumns();

        // Create a column in the visualization for each entry in the fixture data.
        foreach (var column in columns)
        {
            visualization.TableVisualizationOptions.ColumnOptions.Add(column.Key, new TableColumnOptions
                { DisplayName = column.Key });
        }

        var visualizations = new VisualizationResponse[]
        {
                visualization,
        };

        var responseJson = JsonSerializer.Serialize(visualizations);

        mock.When("/api/v1/Visualizations")
            .Respond("application/json", responseJson);

        // Build an empty query results response.
        var queryResults = new PaginatedQueryResult
            {
                TotalItems = 0,
            };
        mock.When("/api/v1/QueryResults/*")
            .RespondJson(queryResults);

        _testOutputHelper = testOutputHelper;
    }

    /// <summary>
    /// Tests the QueryVisualizations component's ability to render successfully.
    /// </summary>
    /// <remarks>
    /// This test arranges the necessary parameters for the QueryVisualizations component,
    /// renders it, and waits for an element with the class "yeah" to appear within a
    /// specified timeout. It then asserts that the rendered markup is written to the test
    /// output helper.
    /// </remarks>
    [Fact]
    public void QueryVisualizations_View_Success_Test()
    {
        // Arrange
        var cut = RenderComponent<QueryVisualizations>(parameters =>
        {
            parameters.Add(p => p.QueryId, _validQueryId);
            parameters.Add(p => p.Columns, QueryColumnFixture.GetColumns());
        });

        // Act
        cut.WaitForElement("#visualization-" + _validQueryId, TimeSpan.FromSeconds(5));

        // Assert
        Assert.NotNull(cut.Find("#new-visualization-button"));
    }

    /// <summary>
    /// Tests the QueryVisualizations component's ability to show options dialog.
    /// </summary>
    [Fact]
    public void QueryVisualizations_Show_Options_Test()
    {
        // Arrange
        JSInterop.Mode = JSRuntimeMode.Loose;
        RenderTree.Add<CascadingValue<Dictionary<string, Column>>>(p => p.Add(x => x.Value, QueryColumnFixture.GetColumns()));

        var cut = Render(@<text>
                <RadzenDialog />
                <QueryVisualizations QueryId="@_validQueryId" />
            </text>
        );

        // Act
        cut.WaitForElement("#visualization-" + _validQueryId, TimeSpan.FromSeconds(5));

        var optionsButton = cut.Find("#visualization-options-button");

        optionsButton.Click();

        // We won't actually interact with the options dialog from here. Just make sure it shows up.
        cut.WaitForElement(".rz-dialog-wrapper", TimeSpan.FromSeconds(5));
    }
}
