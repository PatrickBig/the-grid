// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TheGrid.Data;
using TheGrid.Models.Visualizations;
using TheGrid.Shared.Models;

#nullable disable

namespace TheGrid.Postgres.Migrations
{
    [DbContext(typeof(TheGridDbContext))]
    partial class TheGridDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "hstore");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TheGrid.Models.Column", b =>
                {
                    b.Property<int>("QueryId")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("QueryId", "Name");

                    b.ToTable("QueryColumns");
                });

            modelBuilder.Entity("TheGrid.Models.Connection", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<Dictionary<string, string>>("ConnectionProperties")
                        .IsRequired()
                        .HasColumnType("hstore");

                    b.Property<string>("ConnectorId")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("character varying(250)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("OrganizationId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ConnectorId");

                    b.HasIndex("OrganizationId");

                    b.ToTable("Connections");
                });

            modelBuilder.Entity("TheGrid.Models.Organization", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Organizations");
                });

            modelBuilder.Entity("TheGrid.Models.Query", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("ConnectionId")
                        .HasColumnType("integer");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<List<string>>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("ConnectionId");

                    b.ToTable("Queries");
                });

            modelBuilder.Entity("TheGrid.Models.QueryExecution", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime?>("DateCompleted")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("DateQueued")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ErrorOutput")
                        .HasColumnType("text");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("JobId")
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int>("QueryId")
                        .HasColumnType("integer");

                    b.Property<string[]>("StandardOutput")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("QueryExecutions");
                });

            modelBuilder.Entity("TheGrid.Models.QueryResultRow", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<Dictionary<string, object>>("Data")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<long>("QueryExecutionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("QueryExecutionId");

                    b.ToTable("QueryResultRows");
                });

            modelBuilder.Entity("TheGrid.Models.Visualizations.Visualization", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QueryId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QueryId");

                    b.ToTable("Visualizations");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Visualization");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("TheGrid.Shared.Models.Connector", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<bool>("Disabled")
                        .HasColumnType("boolean");

                    b.Property<string>("EditorLanguage")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<List<ConnectionProperty>>("Parameters")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("RunnerIcon")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("SupportsConnectionTest")
                        .HasColumnType("boolean");

                    b.Property<bool>("SupportsSchemaDiscovery")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.ToTable("Connectors");
                });

            modelBuilder.Entity("TheGrid.Models.Visualizations.TableVisualization", b =>
                {
                    b.HasBaseType("TheGrid.Models.Visualizations.Visualization");

                    b.Property<Dictionary<string, Models.Visualizations.TableColumn>>("Columns")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("PageSize")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue("TableVisualization");
                });

            modelBuilder.Entity("TheGrid.Models.Column", b =>
                {
                    b.HasOne("TheGrid.Models.Query", "Query")
                        .WithMany("Columns")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("TheGrid.Models.Connection", b =>
                {
                    b.HasOne("TheGrid.Shared.Models.Connector", "Connector")
                        .WithMany()
                        .HasForeignKey("ConnectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TheGrid.Models.Organization", "Organization")
                        .WithMany("Connections")
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connector");

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("TheGrid.Models.Query", b =>
                {
                    b.HasOne("TheGrid.Models.Connection", "Connection")
                        .WithMany()
                        .HasForeignKey("ConnectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Connection");
                });

            modelBuilder.Entity("TheGrid.Models.QueryExecution", b =>
                {
                    b.HasOne("TheGrid.Models.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("TheGrid.Models.QueryResultRow", b =>
                {
                    b.HasOne("TheGrid.Models.QueryExecution", "QueryExecution")
                        .WithMany()
                        .HasForeignKey("QueryExecutionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("QueryExecution");
                });

            modelBuilder.Entity("TheGrid.Models.Visualizations.Visualization", b =>
                {
                    b.HasOne("TheGrid.Models.Query", "Query")
                        .WithMany()
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Query");
                });

            modelBuilder.Entity("TheGrid.Models.Organization", b =>
                {
                    b.Navigation("Connections");
                });

            modelBuilder.Entity("TheGrid.Models.Query", b =>
                {
                    b.Navigation("Columns");
                });
#pragma warning restore 612, 618
        }
    }
}
